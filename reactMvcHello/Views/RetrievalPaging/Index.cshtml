
@{
    TempData["Title"] = "Display tabular data from database using ReactJS";
}

<h2>@TempData["Title"]</h2>

@* HTML *@
<div id="gridData" class="container"></div>

@* Bootstrap CSS : v3.3.6 *@
@* Font Awesome 4.1.0 *@
@* jQuery : v2.2.0 *@
@* ReactJS Library 0.14.6 *@
<script src="~/Scripts/react.min.js"></script>
<script src="~/Scripts/react-dom.min.js"></script>

@* JSX converter (JSX to native javascript) *@
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>*@
<script src="~/Scripts/browser.min.js"></script>


@* ReactJS components *@
<script type="text/babel">
    @* Here we will create react component *@

    @* 1. Paging component *@
    var GridPager = React.createClass({
        render: function(){
            @*console.log('GridPager', this.props);*@
            var li = [];
            var pageCount = this.props.Size;
            for(var i = 1; i <= pageCount; i++) {
                if(this.props.currentPage == i){
                    var element = (<li key={i} className="active"><a href="#">{i}</a></li>);
                    @*console.log(element);*@
                    li.push(element);
                }
                else {
                    var element = (<li key={i} onClick={this.props.onPageChanged.bind(null, i)}><a href="#">{i}</a></li>);
                    @*console.log(element);*@
                    li.push(element);                
                }
            }
            return (<ul className="pagination">{li}</ul>);
        }
    });

    @* 2. Table row component *@
    var EmployeeGridRow = React.createClass({
        render: function()
        {
            @*console.log('EmployeeGridRow',this.props.item);*@
            return (
                <tr>
                    <td>{this.props.item.FirstName}</td>
                    <td>{this.props.item.LastName}</td>
                    <td>{this.props.item.EMailID}</td>
                    <td>{this.props.item.City}</td>
                    <td>{this.props.item.Country}</td>
                </tr>
            );    
        }
    });

    @* 3. Table component *@
    var EmployeeGridTable = React.createClass({
        @* event *@
        getInitialState : function()
        {
            return {
                @* view model *@
                Data : {
                    List : [],
                    totalPage : 0,
                    sortColumnName : null,
                    sortOrder : null,
                    currentPage : 1,
                    pageSize : 3
                }
            }
        },
        @* event *@
        componentDidMount : function()
        {   
            this.populateData();
        },
        @* method - populate data *@
        populateData : function() {
            @* prepare parameters *@
            var params = {
                pageSize: this.state.Data.pageSize,
                currentPage: this.state.Data.currentPage,                
            };

            if(this.state.Data.sortColumnName){
                params.sortColumnName = this.state.Data.sortColumnName;
            }

            if(this.state.Data.sortOrder){                
                params.sortOrder = this.state.Data.sortOrder;
            }

            @*console.log('populateData>>params', params);*@

            @* Fetch data via ajax *@
            $.ajax({
                url: this.props.dataUrl,
                type: 'GET',
                data : params,
                success : function(data){
                    @*console.log('populateData>>data', data);*@
                    if(this.isMounted()) {
                        this.setState({Data: data});
                    }
                }.bind(this),
                error :  function(err){
                    console.error('populateData>>err', err);
                    alert('Error');
                }.bind(this)
            });           
        },
        @* event - pagination *@
        pageChanged : function(pageNumber, e) {
            e.preventDefault();
            this.state.Data.currentPage = pageNumber;
            this.populateData();
        },
        @* event - sorting *@
        sortChanged : function(sortColumnName, order, e) {
            e.preventDefault();
            this.state.Data.sortColumnName = sortColumnName;
            this.state.Data.currentPage = 1;
            this.state.Data.sortOrder = order.toString().toLowerCase() == 'asc' ? 'desc' : 'asc';
            this.populateData();
        },
        @* property for CSS class - sort icon on table header *@
        _sortClass : function(filterName) {
            return "fa fa-fw " + ((filterName == this.state.Data.sortColumnName) ? ("fa-sort-" + this.state.Data.sortOrder) : "fa-sort")
        },
        @* render *@
        render : function()
        {
            var rows = [];
            this.state.Data.List.forEach(function(item) {
                rows.push(<EmployeeGridRow key={item.EmployeeID} item={item} />);
            });

            return (
                <div>
                    <table className="table table-bordered table-responsive">
                        <thead>
                            <tr>
                                <th onClick={this.sortChanged.bind(this,'FirstName',this.state.Data.sortOrder)}>
                                    First Name
                                    <i className={this._sortClass('FirstName')}></i>
                                </th>
                                <th onClick={this.sortChanged.bind(this,'LastName',this.state.Data.sortOrder)}>
                                    Last Name
                                    <i className={this._sortClass('LastName')}></i>
                                </th>
                                <th onClick={this.sortChanged.bind(this,'EMailID',this.state.Data.sortOrder)}>
                                    E-Mail
                                    <i className={this._sortClass('EMailID')}></i>
                                </th>
                                <th onClick={this.sortChanged.bind(this,'City',this.state.Data.sortOrder)}>
                                    City
                                    <i className={this._sortClass('City')}></i>
                                </th>
                                <th onClick={this.sortChanged.bind(this,'Country',this.state.Data.sortOrder)}>
                                    Country
                                    <i className={this._sortClass('Country')}></i>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            {rows}
                        </tbody>
                    </table>
                    <GridPager Size={this.state.Data.totalPage} onPageChanged={this.pageChanged} currentPage={this.state.Data.currentPage} />
                </div>
            );
        } 
    });

    ReactDOM.render(
        <EmployeeGridTable dataUrl="/RetrievalPaging/GetEmployeeList" />,
        document.getElementById('gridData')
    );

</script>
